# Generated by Django 3.1.3 on 2021-07-27 08:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import users.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('listing', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(help_text='Provide an email for registration', max_length=320, unique=True, verbose_name='Email')),
                ('user_full_name', models.CharField(max_length=70, verbose_name='name')),
                ('user_bride_groom', models.CharField(blank=True, choices=[('Bride', 'Bride'), ('Groom', 'Groom')], max_length=20, null=True)),
                ('user_profile_pic', models.ImageField(blank=True, default='default.jpg', null=True, upload_to='profile_pics')),
                ('partner_full_name', models.CharField(blank=True, max_length=70, null=True, verbose_name='Partner name')),
                ('partner_bride_groom', models.CharField(blank=True, choices=[('Bride', 'Bride'), ('Groom', 'Groom')], max_length=20, null=True)),
                ('wedding_date', models.DateField(blank=True, null=True, verbose_name='wedding date')),
                ('wedding_venue', models.CharField(blank=True, max_length=70, null=True, verbose_name='wedding venue')),
                ('phone_number', models.BigIntegerField(help_text='Provide an mobile number without +91')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=False, verbose_name='active')),
                ('is_verified', models.BooleanField(default=False, verbose_name='verified')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff')),
                ('is_vendor', models.BooleanField(default=False, verbose_name='vendor')),
                ('currency', models.CharField(choices=[('INR', 'INR'), ('USD', 'USD'), ('EUR', 'EUR'), ('AUD', 'AUD'), ('GBP', 'GBP')], default='INR', max_length=70)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', users.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_address', models.TextField()),
                ('pin_code', models.IntegerField(null=True)),
                ('city', models.CharField(max_length=200)),
                ('state', models.CharField(max_length=200)),
                ('country', models.CharField(max_length=200)),
                ('default', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['default'],
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('website_link', models.URLField(blank=True, null=True)),
                ('draft_listing', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='listing.draftlisting')),
                ('listing', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='listing.listing')),
                ('listing_parent_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='listing.parentlistingcategory')),
                ('listing_sub_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='listing.listingcategory')),
                ('vendor_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('category', models.CharField(blank=True, max_length=200, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GuestList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('people', models.IntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Budget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('amount', models.FloatField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200)),
                ('image', models.ImageField(blank=True, default='default.jpg', upload_to='')),
                ('youtube_embed_link', models.URLField(blank=True, null=True)),
                ('description', models.TextField(help_text='Description')),
                ('meta_title', models.TextField(blank=True, help_text='Meta title', null=True)),
                ('meta_description', models.TextField(blank=True, help_text='Meta desription', null=True)),
                ('is_vnv', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='address',
            field=models.ManyToManyField(blank=True, to='users.Address'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
